/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef benchmark_TYPES_H
#define benchmark_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class BenchmarkMessage;

typedef struct _BenchmarkMessage__isset {
  _BenchmarkMessage__isset() : field1(false), field2(false), field3(false), field4(false), field5(false), field6(false), field7(false), field9(false), field12(false), field13(false), field14(false), field16(false), field17(false), field18(false), field22(false), field23(false), field24(false), field25(false), field29(false), field30(false), field59(false), field60(false), field67(false), field68(false), field78(false), field80(false), field81(false), field100(false), field101(false), field102(false), field103(false), field104(false), field128(false), field129(false), field130(false), field131(false), field150(false), field271(false), field272(false), field280(false) {}
  bool field1 :1;
  bool field2 :1;
  bool field3 :1;
  bool field4 :1;
  bool field5 :1;
  bool field6 :1;
  bool field7 :1;
  bool field9 :1;
  bool field12 :1;
  bool field13 :1;
  bool field14 :1;
  bool field16 :1;
  bool field17 :1;
  bool field18 :1;
  bool field22 :1;
  bool field23 :1;
  bool field24 :1;
  bool field25 :1;
  bool field29 :1;
  bool field30 :1;
  bool field59 :1;
  bool field60 :1;
  bool field67 :1;
  bool field68 :1;
  bool field78 :1;
  bool field80 :1;
  bool field81 :1;
  bool field100 :1;
  bool field101 :1;
  bool field102 :1;
  bool field103 :1;
  bool field104 :1;
  bool field128 :1;
  bool field129 :1;
  bool field130 :1;
  bool field131 :1;
  bool field150 :1;
  bool field271 :1;
  bool field272 :1;
  bool field280 :1;
} _BenchmarkMessage__isset;

class BenchmarkMessage : public virtual ::apache::thrift::TBase {
 public:

  BenchmarkMessage(const BenchmarkMessage&);
  BenchmarkMessage& operator=(const BenchmarkMessage&);
  BenchmarkMessage() : field1(), field2(0), field3(0), field4(), field5(0), field6(0), field7(), field9(), field12(0), field13(0), field14(0), field16(0), field17(0), field18(), field22(0), field23(0), field24(0), field25(0), field29(0), field30(0), field59(0), field60(0), field67(0), field68(0), field78(0), field80(0), field81(0), field100(0), field101(0), field102(), field103(), field104(0), field128(0), field129(), field130(0), field131(0), field150(0), field271(0), field272(0), field280(0) {
  }

  virtual ~BenchmarkMessage() noexcept;
  std::string field1;
  int32_t field2;
  int32_t field3;
  std::string field4;
  int64_t field5;
  int32_t field6;
  std::string field7;
  std::string field9;
  bool field12;
  bool field13;
  bool field14;
  int32_t field16;
  bool field17;
  std::string field18;
  int64_t field22;
  int32_t field23;
  bool field24;
  int32_t field25;
  int32_t field29;
  bool field30;
  bool field59;
  int32_t field60;
  int32_t field67;
  int32_t field68;
  bool field78;
  bool field80;
  bool field81;
  int32_t field100;
  int32_t field101;
  std::string field102;
  std::string field103;
  int32_t field104;
  int32_t field128;
  std::string field129;
  int32_t field130;
  int32_t field131;
  int32_t field150;
  int32_t field271;
  int32_t field272;
  int32_t field280;

  _BenchmarkMessage__isset __isset;

  void __set_field1(const std::string& val);

  void __set_field2(const int32_t val);

  void __set_field3(const int32_t val);

  void __set_field4(const std::string& val);

  void __set_field5(const int64_t val);

  void __set_field6(const int32_t val);

  void __set_field7(const std::string& val);

  void __set_field9(const std::string& val);

  void __set_field12(const bool val);

  void __set_field13(const bool val);

  void __set_field14(const bool val);

  void __set_field16(const int32_t val);

  void __set_field17(const bool val);

  void __set_field18(const std::string& val);

  void __set_field22(const int64_t val);

  void __set_field23(const int32_t val);

  void __set_field24(const bool val);

  void __set_field25(const int32_t val);

  void __set_field29(const int32_t val);

  void __set_field30(const bool val);

  void __set_field59(const bool val);

  void __set_field60(const int32_t val);

  void __set_field67(const int32_t val);

  void __set_field68(const int32_t val);

  void __set_field78(const bool val);

  void __set_field80(const bool val);

  void __set_field81(const bool val);

  void __set_field100(const int32_t val);

  void __set_field101(const int32_t val);

  void __set_field102(const std::string& val);

  void __set_field103(const std::string& val);

  void __set_field104(const int32_t val);

  void __set_field128(const int32_t val);

  void __set_field129(const std::string& val);

  void __set_field130(const int32_t val);

  void __set_field131(const int32_t val);

  void __set_field150(const int32_t val);

  void __set_field271(const int32_t val);

  void __set_field272(const int32_t val);

  void __set_field280(const int32_t val);

  bool operator == (const BenchmarkMessage & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(field3 == rhs.field3))
      return false;
    if (!(field4 == rhs.field4))
      return false;
    if (!(field5 == rhs.field5))
      return false;
    if (!(field6 == rhs.field6))
      return false;
    if (!(field7 == rhs.field7))
      return false;
    if (!(field9 == rhs.field9))
      return false;
    if (!(field12 == rhs.field12))
      return false;
    if (!(field13 == rhs.field13))
      return false;
    if (!(field14 == rhs.field14))
      return false;
    if (!(field16 == rhs.field16))
      return false;
    if (!(field17 == rhs.field17))
      return false;
    if (!(field18 == rhs.field18))
      return false;
    if (!(field22 == rhs.field22))
      return false;
    if (!(field23 == rhs.field23))
      return false;
    if (!(field24 == rhs.field24))
      return false;
    if (!(field25 == rhs.field25))
      return false;
    if (!(field29 == rhs.field29))
      return false;
    if (!(field30 == rhs.field30))
      return false;
    if (!(field59 == rhs.field59))
      return false;
    if (!(field60 == rhs.field60))
      return false;
    if (!(field67 == rhs.field67))
      return false;
    if (!(field68 == rhs.field68))
      return false;
    if (!(field78 == rhs.field78))
      return false;
    if (!(field80 == rhs.field80))
      return false;
    if (!(field81 == rhs.field81))
      return false;
    if (!(field100 == rhs.field100))
      return false;
    if (!(field101 == rhs.field101))
      return false;
    if (!(field102 == rhs.field102))
      return false;
    if (!(field103 == rhs.field103))
      return false;
    if (!(field104 == rhs.field104))
      return false;
    if (!(field128 == rhs.field128))
      return false;
    if (!(field129 == rhs.field129))
      return false;
    if (!(field130 == rhs.field130))
      return false;
    if (!(field131 == rhs.field131))
      return false;
    if (!(field150 == rhs.field150))
      return false;
    if (!(field271 == rhs.field271))
      return false;
    if (!(field272 == rhs.field272))
      return false;
    if (!(field280 == rhs.field280))
      return false;
    return true;
  }
  bool operator != (const BenchmarkMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BenchmarkMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BenchmarkMessage &a, BenchmarkMessage &b);

std::ostream& operator<<(std::ostream& out, const BenchmarkMessage& obj);



#endif
