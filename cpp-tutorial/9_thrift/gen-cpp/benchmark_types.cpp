/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "benchmark_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




BenchmarkMessage::~BenchmarkMessage() noexcept {
}


void BenchmarkMessage::__set_field1(const std::string& val) {
  this->field1 = val;
}

void BenchmarkMessage::__set_field2(const int32_t val) {
  this->field2 = val;
}

void BenchmarkMessage::__set_field3(const int32_t val) {
  this->field3 = val;
}

void BenchmarkMessage::__set_field4(const std::string& val) {
  this->field4 = val;
}

void BenchmarkMessage::__set_field5(const int64_t val) {
  this->field5 = val;
}

void BenchmarkMessage::__set_field6(const int32_t val) {
  this->field6 = val;
}

void BenchmarkMessage::__set_field7(const std::string& val) {
  this->field7 = val;
}

void BenchmarkMessage::__set_field9(const std::string& val) {
  this->field9 = val;
}

void BenchmarkMessage::__set_field12(const bool val) {
  this->field12 = val;
}

void BenchmarkMessage::__set_field13(const bool val) {
  this->field13 = val;
}

void BenchmarkMessage::__set_field14(const bool val) {
  this->field14 = val;
}

void BenchmarkMessage::__set_field16(const int32_t val) {
  this->field16 = val;
}

void BenchmarkMessage::__set_field17(const bool val) {
  this->field17 = val;
}

void BenchmarkMessage::__set_field18(const std::string& val) {
  this->field18 = val;
}

void BenchmarkMessage::__set_field22(const int64_t val) {
  this->field22 = val;
}

void BenchmarkMessage::__set_field23(const int32_t val) {
  this->field23 = val;
}

void BenchmarkMessage::__set_field24(const bool val) {
  this->field24 = val;
}

void BenchmarkMessage::__set_field25(const int32_t val) {
  this->field25 = val;
}

void BenchmarkMessage::__set_field29(const int32_t val) {
  this->field29 = val;
}

void BenchmarkMessage::__set_field30(const bool val) {
  this->field30 = val;
}

void BenchmarkMessage::__set_field59(const bool val) {
  this->field59 = val;
}

void BenchmarkMessage::__set_field60(const int32_t val) {
  this->field60 = val;
}

void BenchmarkMessage::__set_field67(const int32_t val) {
  this->field67 = val;
}

void BenchmarkMessage::__set_field68(const int32_t val) {
  this->field68 = val;
}

void BenchmarkMessage::__set_field78(const bool val) {
  this->field78 = val;
}

void BenchmarkMessage::__set_field80(const bool val) {
  this->field80 = val;
}

void BenchmarkMessage::__set_field81(const bool val) {
  this->field81 = val;
}

void BenchmarkMessage::__set_field100(const int32_t val) {
  this->field100 = val;
}

void BenchmarkMessage::__set_field101(const int32_t val) {
  this->field101 = val;
}

void BenchmarkMessage::__set_field102(const std::string& val) {
  this->field102 = val;
}

void BenchmarkMessage::__set_field103(const std::string& val) {
  this->field103 = val;
}

void BenchmarkMessage::__set_field104(const int32_t val) {
  this->field104 = val;
}

void BenchmarkMessage::__set_field128(const int32_t val) {
  this->field128 = val;
}

void BenchmarkMessage::__set_field129(const std::string& val) {
  this->field129 = val;
}

void BenchmarkMessage::__set_field130(const int32_t val) {
  this->field130 = val;
}

void BenchmarkMessage::__set_field131(const int32_t val) {
  this->field131 = val;
}

void BenchmarkMessage::__set_field150(const int32_t val) {
  this->field150 = val;
}

void BenchmarkMessage::__set_field271(const int32_t val) {
  this->field271 = val;
}

void BenchmarkMessage::__set_field272(const int32_t val) {
  this->field272 = val;
}

void BenchmarkMessage::__set_field280(const int32_t val) {
  this->field280 = val;
}
std::ostream& operator<<(std::ostream& out, const BenchmarkMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BenchmarkMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 59:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 67:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 68:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 78:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field78);
          this->__isset.field78 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 80:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field80);
          this->__isset.field80 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 81:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field81);
          this->__isset.field81 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 100:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field100);
          this->__isset.field100 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 101:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field101);
          this->__isset.field101 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 102:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field102);
          this->__isset.field102 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 103:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field103);
          this->__isset.field103 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 104:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field104);
          this->__isset.field104 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 128:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field128);
          this->__isset.field128 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 129:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field129);
          this->__isset.field129 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 130:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field130);
          this->__isset.field130 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 131:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field131);
          this->__isset.field131 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 150:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field150);
          this->__isset.field150 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 271:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field271);
          this->__isset.field271 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 272:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field272);
          this->__isset.field272 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 280:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field280);
          this->__isset.field280 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BenchmarkMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BenchmarkMessage");

  xfer += oprot->writeFieldBegin("field1", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->field1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field2", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->field2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field3", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->field3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field4", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->field4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field5", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->field5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field6", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->field6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field7", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->field7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field9", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->field9);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field12", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->field12);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field13", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->field13);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field14", ::apache::thrift::protocol::T_BOOL, 14);
  xfer += oprot->writeBool(this->field14);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field16", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->field16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field17", ::apache::thrift::protocol::T_BOOL, 17);
  xfer += oprot->writeBool(this->field17);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field18", ::apache::thrift::protocol::T_STRING, 18);
  xfer += oprot->writeString(this->field18);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field22", ::apache::thrift::protocol::T_I64, 22);
  xfer += oprot->writeI64(this->field22);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field23", ::apache::thrift::protocol::T_I32, 23);
  xfer += oprot->writeI32(this->field23);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field24", ::apache::thrift::protocol::T_BOOL, 24);
  xfer += oprot->writeBool(this->field24);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field25", ::apache::thrift::protocol::T_I32, 25);
  xfer += oprot->writeI32(this->field25);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field29", ::apache::thrift::protocol::T_I32, 29);
  xfer += oprot->writeI32(this->field29);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field30", ::apache::thrift::protocol::T_BOOL, 30);
  xfer += oprot->writeBool(this->field30);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field59", ::apache::thrift::protocol::T_BOOL, 59);
  xfer += oprot->writeBool(this->field59);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field60", ::apache::thrift::protocol::T_I32, 60);
  xfer += oprot->writeI32(this->field60);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field67", ::apache::thrift::protocol::T_I32, 67);
  xfer += oprot->writeI32(this->field67);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field68", ::apache::thrift::protocol::T_I32, 68);
  xfer += oprot->writeI32(this->field68);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field78", ::apache::thrift::protocol::T_BOOL, 78);
  xfer += oprot->writeBool(this->field78);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field80", ::apache::thrift::protocol::T_BOOL, 80);
  xfer += oprot->writeBool(this->field80);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field81", ::apache::thrift::protocol::T_BOOL, 81);
  xfer += oprot->writeBool(this->field81);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field100", ::apache::thrift::protocol::T_I32, 100);
  xfer += oprot->writeI32(this->field100);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field101", ::apache::thrift::protocol::T_I32, 101);
  xfer += oprot->writeI32(this->field101);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field102", ::apache::thrift::protocol::T_STRING, 102);
  xfer += oprot->writeString(this->field102);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field103", ::apache::thrift::protocol::T_STRING, 103);
  xfer += oprot->writeString(this->field103);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field104", ::apache::thrift::protocol::T_I32, 104);
  xfer += oprot->writeI32(this->field104);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field128", ::apache::thrift::protocol::T_I32, 128);
  xfer += oprot->writeI32(this->field128);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field129", ::apache::thrift::protocol::T_STRING, 129);
  xfer += oprot->writeString(this->field129);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field130", ::apache::thrift::protocol::T_I32, 130);
  xfer += oprot->writeI32(this->field130);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field131", ::apache::thrift::protocol::T_I32, 131);
  xfer += oprot->writeI32(this->field131);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field150", ::apache::thrift::protocol::T_I32, 150);
  xfer += oprot->writeI32(this->field150);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field271", ::apache::thrift::protocol::T_I32, 271);
  xfer += oprot->writeI32(this->field271);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field272", ::apache::thrift::protocol::T_I32, 272);
  xfer += oprot->writeI32(this->field272);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field280", ::apache::thrift::protocol::T_I32, 280);
  xfer += oprot->writeI32(this->field280);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BenchmarkMessage &a, BenchmarkMessage &b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field9, b.field9);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field78, b.field78);
  swap(a.field80, b.field80);
  swap(a.field81, b.field81);
  swap(a.field100, b.field100);
  swap(a.field101, b.field101);
  swap(a.field102, b.field102);
  swap(a.field103, b.field103);
  swap(a.field104, b.field104);
  swap(a.field128, b.field128);
  swap(a.field129, b.field129);
  swap(a.field130, b.field130);
  swap(a.field131, b.field131);
  swap(a.field150, b.field150);
  swap(a.field271, b.field271);
  swap(a.field272, b.field272);
  swap(a.field280, b.field280);
  swap(a.__isset, b.__isset);
}

BenchmarkMessage::BenchmarkMessage(const BenchmarkMessage& other0) {
  field1 = other0.field1;
  field2 = other0.field2;
  field3 = other0.field3;
  field4 = other0.field4;
  field5 = other0.field5;
  field6 = other0.field6;
  field7 = other0.field7;
  field9 = other0.field9;
  field12 = other0.field12;
  field13 = other0.field13;
  field14 = other0.field14;
  field16 = other0.field16;
  field17 = other0.field17;
  field18 = other0.field18;
  field22 = other0.field22;
  field23 = other0.field23;
  field24 = other0.field24;
  field25 = other0.field25;
  field29 = other0.field29;
  field30 = other0.field30;
  field59 = other0.field59;
  field60 = other0.field60;
  field67 = other0.field67;
  field68 = other0.field68;
  field78 = other0.field78;
  field80 = other0.field80;
  field81 = other0.field81;
  field100 = other0.field100;
  field101 = other0.field101;
  field102 = other0.field102;
  field103 = other0.field103;
  field104 = other0.field104;
  field128 = other0.field128;
  field129 = other0.field129;
  field130 = other0.field130;
  field131 = other0.field131;
  field150 = other0.field150;
  field271 = other0.field271;
  field272 = other0.field272;
  field280 = other0.field280;
  __isset = other0.__isset;
}
BenchmarkMessage& BenchmarkMessage::operator=(const BenchmarkMessage& other1) {
  field1 = other1.field1;
  field2 = other1.field2;
  field3 = other1.field3;
  field4 = other1.field4;
  field5 = other1.field5;
  field6 = other1.field6;
  field7 = other1.field7;
  field9 = other1.field9;
  field12 = other1.field12;
  field13 = other1.field13;
  field14 = other1.field14;
  field16 = other1.field16;
  field17 = other1.field17;
  field18 = other1.field18;
  field22 = other1.field22;
  field23 = other1.field23;
  field24 = other1.field24;
  field25 = other1.field25;
  field29 = other1.field29;
  field30 = other1.field30;
  field59 = other1.field59;
  field60 = other1.field60;
  field67 = other1.field67;
  field68 = other1.field68;
  field78 = other1.field78;
  field80 = other1.field80;
  field81 = other1.field81;
  field100 = other1.field100;
  field101 = other1.field101;
  field102 = other1.field102;
  field103 = other1.field103;
  field104 = other1.field104;
  field128 = other1.field128;
  field129 = other1.field129;
  field130 = other1.field130;
  field131 = other1.field131;
  field150 = other1.field150;
  field271 = other1.field271;
  field272 = other1.field272;
  field280 = other1.field280;
  __isset = other1.__isset;
  return *this;
}
void BenchmarkMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BenchmarkMessage(";
  out << "field1=" << to_string(field1);
  out << ", " << "field2=" << to_string(field2);
  out << ", " << "field3=" << to_string(field3);
  out << ", " << "field4=" << to_string(field4);
  out << ", " << "field5=" << to_string(field5);
  out << ", " << "field6=" << to_string(field6);
  out << ", " << "field7=" << to_string(field7);
  out << ", " << "field9=" << to_string(field9);
  out << ", " << "field12=" << to_string(field12);
  out << ", " << "field13=" << to_string(field13);
  out << ", " << "field14=" << to_string(field14);
  out << ", " << "field16=" << to_string(field16);
  out << ", " << "field17=" << to_string(field17);
  out << ", " << "field18=" << to_string(field18);
  out << ", " << "field22=" << to_string(field22);
  out << ", " << "field23=" << to_string(field23);
  out << ", " << "field24=" << to_string(field24);
  out << ", " << "field25=" << to_string(field25);
  out << ", " << "field29=" << to_string(field29);
  out << ", " << "field30=" << to_string(field30);
  out << ", " << "field59=" << to_string(field59);
  out << ", " << "field60=" << to_string(field60);
  out << ", " << "field67=" << to_string(field67);
  out << ", " << "field68=" << to_string(field68);
  out << ", " << "field78=" << to_string(field78);
  out << ", " << "field80=" << to_string(field80);
  out << ", " << "field81=" << to_string(field81);
  out << ", " << "field100=" << to_string(field100);
  out << ", " << "field101=" << to_string(field101);
  out << ", " << "field102=" << to_string(field102);
  out << ", " << "field103=" << to_string(field103);
  out << ", " << "field104=" << to_string(field104);
  out << ", " << "field128=" << to_string(field128);
  out << ", " << "field129=" << to_string(field129);
  out << ", " << "field130=" << to_string(field130);
  out << ", " << "field131=" << to_string(field131);
  out << ", " << "field150=" << to_string(field150);
  out << ", " << "field271=" << to_string(field271);
  out << ", " << "field272=" << to_string(field272);
  out << ", " << "field280=" << to_string(field280);
  out << ")";
}


