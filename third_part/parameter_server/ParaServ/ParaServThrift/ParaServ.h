/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ParaServ_H
#define ParaServ_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "para_serv_types.h"

namespace ps {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ParaServIf {
 public:
  virtual ~ParaServIf() {}
  virtual void push(const std::map<Key, std::string> & key_vals) = 0;
  virtual void sync_push(const std::map<Key, std::string> & key_vals) = 0;
  virtual void pushemb(const std::map<Key, std::string> & key_vals) = 0;
  virtual void pushada(const std::map<Key, std::string> & key_vals) = 0;
  virtual void pull(std::map<Key, std::string> & _return, const std::set<Key> & keys) = 0;
  virtual void pull_online(std::map<Key, std::string> & _return, const std::set<Key> & keys) = 0;
  virtual void start(const std::vector<int32_t> & col_num, const int32_t tot_files) = 0;
  virtual void copy_start(const std::vector<int32_t> & col_num, const int32_t tot_files) = 0;
  virtual void transport(const std::map<std::string, std::string> & col_ip) = 0;
  virtual void start_sync_client(const std::string& url, const std::string& path) = 0;
  virtual void stop_sync_client(const std::string& url, const std::string& path) = 0;
  virtual void sync_del(const std::set<Key> & keys) = 0;
  virtual void heartbeat(std::string& _return, const int32_t beat) = 0;
  virtual void status_cmd(std::string& _return, const std::string& cmd, const std::vector<std::string> & values) = 0;
  virtual void backup(std::string& _return, const std::string& backup_type, const std::string& subdir, const std::map<std::string, std::string> & col_ip) = 0;
};

class ParaServIfFactory {
 public:
  typedef ParaServIf Handler;

  virtual ~ParaServIfFactory() {}

  virtual ParaServIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ParaServIf* /* handler */) = 0;
};

class ParaServIfSingletonFactory : virtual public ParaServIfFactory {
 public:
  ParaServIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<ParaServIf>& iface) : iface_(iface) {}
  virtual ~ParaServIfSingletonFactory() {}

  virtual ParaServIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ParaServIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<ParaServIf> iface_;
};

class ParaServNull : virtual public ParaServIf {
 public:
  virtual ~ParaServNull() {}
  void push(const std::map<Key, std::string> & /* key_vals */) {
    return;
  }
  void sync_push(const std::map<Key, std::string> & /* key_vals */) {
    return;
  }
  void pushemb(const std::map<Key, std::string> & /* key_vals */) {
    return;
  }
  void pushada(const std::map<Key, std::string> & /* key_vals */) {
    return;
  }
  void pull(std::map<Key, std::string> & /* _return */, const std::set<Key> & /* keys */) {
    return;
  }
  void pull_online(std::map<Key, std::string> & /* _return */, const std::set<Key> & /* keys */) {
    return;
  }
  void start(const std::vector<int32_t> & /* col_num */, const int32_t /* tot_files */) {
    return;
  }
  void copy_start(const std::vector<int32_t> & /* col_num */, const int32_t /* tot_files */) {
    return;
  }
  void transport(const std::map<std::string, std::string> & /* col_ip */) {
    return;
  }
  void start_sync_client(const std::string& /* url */, const std::string& /* path */) {
    return;
  }
  void stop_sync_client(const std::string& /* url */, const std::string& /* path */) {
    return;
  }
  void sync_del(const std::set<Key> & /* keys */) {
    return;
  }
  void heartbeat(std::string& /* _return */, const int32_t /* beat */) {
    return;
  }
  void status_cmd(std::string& /* _return */, const std::string& /* cmd */, const std::vector<std::string> & /* values */) {
    return;
  }
  void backup(std::string& /* _return */, const std::string& /* backup_type */, const std::string& /* subdir */, const std::map<std::string, std::string> & /* col_ip */) {
    return;
  }
};

typedef struct _ParaServ_push_args__isset {
  _ParaServ_push_args__isset() : key_vals(false) {}
  bool key_vals :1;
} _ParaServ_push_args__isset;

class ParaServ_push_args {
 public:

  ParaServ_push_args(const ParaServ_push_args&);
  ParaServ_push_args& operator=(const ParaServ_push_args&);
  ParaServ_push_args() {
  }

  virtual ~ParaServ_push_args() throw();
  std::map<Key, std::string>  key_vals;

  _ParaServ_push_args__isset __isset;

  void __set_key_vals(const std::map<Key, std::string> & val);

  bool operator == (const ParaServ_push_args & rhs) const
  {
    if (!(key_vals == rhs.key_vals))
      return false;
    return true;
  }
  bool operator != (const ParaServ_push_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_push_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_push_pargs {
 public:


  virtual ~ParaServ_push_pargs() throw();
  const std::map<Key, std::string> * key_vals;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParaServ_sync_push_args__isset {
  _ParaServ_sync_push_args__isset() : key_vals(false) {}
  bool key_vals :1;
} _ParaServ_sync_push_args__isset;

class ParaServ_sync_push_args {
 public:

  ParaServ_sync_push_args(const ParaServ_sync_push_args&);
  ParaServ_sync_push_args& operator=(const ParaServ_sync_push_args&);
  ParaServ_sync_push_args() {
  }

  virtual ~ParaServ_sync_push_args() throw();
  std::map<Key, std::string>  key_vals;

  _ParaServ_sync_push_args__isset __isset;

  void __set_key_vals(const std::map<Key, std::string> & val);

  bool operator == (const ParaServ_sync_push_args & rhs) const
  {
    if (!(key_vals == rhs.key_vals))
      return false;
    return true;
  }
  bool operator != (const ParaServ_sync_push_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_sync_push_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_sync_push_pargs {
 public:


  virtual ~ParaServ_sync_push_pargs() throw();
  const std::map<Key, std::string> * key_vals;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_sync_push_result {
 public:

  ParaServ_sync_push_result(const ParaServ_sync_push_result&);
  ParaServ_sync_push_result& operator=(const ParaServ_sync_push_result&);
  ParaServ_sync_push_result() {
  }

  virtual ~ParaServ_sync_push_result() throw();

  bool operator == (const ParaServ_sync_push_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ParaServ_sync_push_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_sync_push_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_sync_push_presult {
 public:


  virtual ~ParaServ_sync_push_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ParaServ_pushemb_args__isset {
  _ParaServ_pushemb_args__isset() : key_vals(false) {}
  bool key_vals :1;
} _ParaServ_pushemb_args__isset;

class ParaServ_pushemb_args {
 public:

  ParaServ_pushemb_args(const ParaServ_pushemb_args&);
  ParaServ_pushemb_args& operator=(const ParaServ_pushemb_args&);
  ParaServ_pushemb_args() {
  }

  virtual ~ParaServ_pushemb_args() throw();
  std::map<Key, std::string>  key_vals;

  _ParaServ_pushemb_args__isset __isset;

  void __set_key_vals(const std::map<Key, std::string> & val);

  bool operator == (const ParaServ_pushemb_args & rhs) const
  {
    if (!(key_vals == rhs.key_vals))
      return false;
    return true;
  }
  bool operator != (const ParaServ_pushemb_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_pushemb_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_pushemb_pargs {
 public:


  virtual ~ParaServ_pushemb_pargs() throw();
  const std::map<Key, std::string> * key_vals;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_pushemb_result {
 public:

  ParaServ_pushemb_result(const ParaServ_pushemb_result&);
  ParaServ_pushemb_result& operator=(const ParaServ_pushemb_result&);
  ParaServ_pushemb_result() {
  }

  virtual ~ParaServ_pushemb_result() throw();

  bool operator == (const ParaServ_pushemb_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ParaServ_pushemb_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_pushemb_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_pushemb_presult {
 public:


  virtual ~ParaServ_pushemb_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ParaServ_pushada_args__isset {
  _ParaServ_pushada_args__isset() : key_vals(false) {}
  bool key_vals :1;
} _ParaServ_pushada_args__isset;

class ParaServ_pushada_args {
 public:

  ParaServ_pushada_args(const ParaServ_pushada_args&);
  ParaServ_pushada_args& operator=(const ParaServ_pushada_args&);
  ParaServ_pushada_args() {
  }

  virtual ~ParaServ_pushada_args() throw();
  std::map<Key, std::string>  key_vals;

  _ParaServ_pushada_args__isset __isset;

  void __set_key_vals(const std::map<Key, std::string> & val);

  bool operator == (const ParaServ_pushada_args & rhs) const
  {
    if (!(key_vals == rhs.key_vals))
      return false;
    return true;
  }
  bool operator != (const ParaServ_pushada_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_pushada_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_pushada_pargs {
 public:


  virtual ~ParaServ_pushada_pargs() throw();
  const std::map<Key, std::string> * key_vals;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_pushada_result {
 public:

  ParaServ_pushada_result(const ParaServ_pushada_result&);
  ParaServ_pushada_result& operator=(const ParaServ_pushada_result&);
  ParaServ_pushada_result() {
  }

  virtual ~ParaServ_pushada_result() throw();

  bool operator == (const ParaServ_pushada_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ParaServ_pushada_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_pushada_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_pushada_presult {
 public:


  virtual ~ParaServ_pushada_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ParaServ_pull_args__isset {
  _ParaServ_pull_args__isset() : keys(false) {}
  bool keys :1;
} _ParaServ_pull_args__isset;

class ParaServ_pull_args {
 public:

  ParaServ_pull_args(const ParaServ_pull_args&);
  ParaServ_pull_args& operator=(const ParaServ_pull_args&);
  ParaServ_pull_args() {
  }

  virtual ~ParaServ_pull_args() throw();
  std::set<Key>  keys;

  _ParaServ_pull_args__isset __isset;

  void __set_keys(const std::set<Key> & val);

  bool operator == (const ParaServ_pull_args & rhs) const
  {
    if (!(keys == rhs.keys))
      return false;
    return true;
  }
  bool operator != (const ParaServ_pull_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_pull_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_pull_pargs {
 public:


  virtual ~ParaServ_pull_pargs() throw();
  const std::set<Key> * keys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParaServ_pull_result__isset {
  _ParaServ_pull_result__isset() : success(false) {}
  bool success :1;
} _ParaServ_pull_result__isset;

class ParaServ_pull_result {
 public:

  ParaServ_pull_result(const ParaServ_pull_result&);
  ParaServ_pull_result& operator=(const ParaServ_pull_result&);
  ParaServ_pull_result() {
  }

  virtual ~ParaServ_pull_result() throw();
  std::map<Key, std::string>  success;

  _ParaServ_pull_result__isset __isset;

  void __set_success(const std::map<Key, std::string> & val);

  bool operator == (const ParaServ_pull_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ParaServ_pull_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_pull_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParaServ_pull_presult__isset {
  _ParaServ_pull_presult__isset() : success(false) {}
  bool success :1;
} _ParaServ_pull_presult__isset;

class ParaServ_pull_presult {
 public:


  virtual ~ParaServ_pull_presult() throw();
  std::map<Key, std::string> * success;

  _ParaServ_pull_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ParaServ_pull_online_args__isset {
  _ParaServ_pull_online_args__isset() : keys(false) {}
  bool keys :1;
} _ParaServ_pull_online_args__isset;

class ParaServ_pull_online_args {
 public:

  ParaServ_pull_online_args(const ParaServ_pull_online_args&);
  ParaServ_pull_online_args& operator=(const ParaServ_pull_online_args&);
  ParaServ_pull_online_args() {
  }

  virtual ~ParaServ_pull_online_args() throw();
  std::set<Key>  keys;

  _ParaServ_pull_online_args__isset __isset;

  void __set_keys(const std::set<Key> & val);

  bool operator == (const ParaServ_pull_online_args & rhs) const
  {
    if (!(keys == rhs.keys))
      return false;
    return true;
  }
  bool operator != (const ParaServ_pull_online_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_pull_online_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_pull_online_pargs {
 public:


  virtual ~ParaServ_pull_online_pargs() throw();
  const std::set<Key> * keys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParaServ_pull_online_result__isset {
  _ParaServ_pull_online_result__isset() : success(false) {}
  bool success :1;
} _ParaServ_pull_online_result__isset;

class ParaServ_pull_online_result {
 public:

  ParaServ_pull_online_result(const ParaServ_pull_online_result&);
  ParaServ_pull_online_result& operator=(const ParaServ_pull_online_result&);
  ParaServ_pull_online_result() {
  }

  virtual ~ParaServ_pull_online_result() throw();
  std::map<Key, std::string>  success;

  _ParaServ_pull_online_result__isset __isset;

  void __set_success(const std::map<Key, std::string> & val);

  bool operator == (const ParaServ_pull_online_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ParaServ_pull_online_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_pull_online_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParaServ_pull_online_presult__isset {
  _ParaServ_pull_online_presult__isset() : success(false) {}
  bool success :1;
} _ParaServ_pull_online_presult__isset;

class ParaServ_pull_online_presult {
 public:


  virtual ~ParaServ_pull_online_presult() throw();
  std::map<Key, std::string> * success;

  _ParaServ_pull_online_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ParaServ_start_args__isset {
  _ParaServ_start_args__isset() : col_num(false), tot_files(false) {}
  bool col_num :1;
  bool tot_files :1;
} _ParaServ_start_args__isset;

class ParaServ_start_args {
 public:

  ParaServ_start_args(const ParaServ_start_args&);
  ParaServ_start_args& operator=(const ParaServ_start_args&);
  ParaServ_start_args() : tot_files(0) {
  }

  virtual ~ParaServ_start_args() throw();
  std::vector<int32_t>  col_num;
  int32_t tot_files;

  _ParaServ_start_args__isset __isset;

  void __set_col_num(const std::vector<int32_t> & val);

  void __set_tot_files(const int32_t val);

  bool operator == (const ParaServ_start_args & rhs) const
  {
    if (!(col_num == rhs.col_num))
      return false;
    if (!(tot_files == rhs.tot_files))
      return false;
    return true;
  }
  bool operator != (const ParaServ_start_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_start_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_start_pargs {
 public:


  virtual ~ParaServ_start_pargs() throw();
  const std::vector<int32_t> * col_num;
  const int32_t* tot_files;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_start_result {
 public:

  ParaServ_start_result(const ParaServ_start_result&);
  ParaServ_start_result& operator=(const ParaServ_start_result&);
  ParaServ_start_result() {
  }

  virtual ~ParaServ_start_result() throw();

  bool operator == (const ParaServ_start_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ParaServ_start_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_start_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_start_presult {
 public:


  virtual ~ParaServ_start_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ParaServ_copy_start_args__isset {
  _ParaServ_copy_start_args__isset() : col_num(false), tot_files(false) {}
  bool col_num :1;
  bool tot_files :1;
} _ParaServ_copy_start_args__isset;

class ParaServ_copy_start_args {
 public:

  ParaServ_copy_start_args(const ParaServ_copy_start_args&);
  ParaServ_copy_start_args& operator=(const ParaServ_copy_start_args&);
  ParaServ_copy_start_args() : tot_files(0) {
  }

  virtual ~ParaServ_copy_start_args() throw();
  std::vector<int32_t>  col_num;
  int32_t tot_files;

  _ParaServ_copy_start_args__isset __isset;

  void __set_col_num(const std::vector<int32_t> & val);

  void __set_tot_files(const int32_t val);

  bool operator == (const ParaServ_copy_start_args & rhs) const
  {
    if (!(col_num == rhs.col_num))
      return false;
    if (!(tot_files == rhs.tot_files))
      return false;
    return true;
  }
  bool operator != (const ParaServ_copy_start_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_copy_start_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_copy_start_pargs {
 public:


  virtual ~ParaServ_copy_start_pargs() throw();
  const std::vector<int32_t> * col_num;
  const int32_t* tot_files;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_copy_start_result {
 public:

  ParaServ_copy_start_result(const ParaServ_copy_start_result&);
  ParaServ_copy_start_result& operator=(const ParaServ_copy_start_result&);
  ParaServ_copy_start_result() {
  }

  virtual ~ParaServ_copy_start_result() throw();

  bool operator == (const ParaServ_copy_start_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ParaServ_copy_start_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_copy_start_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_copy_start_presult {
 public:


  virtual ~ParaServ_copy_start_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ParaServ_transport_args__isset {
  _ParaServ_transport_args__isset() : col_ip(false) {}
  bool col_ip :1;
} _ParaServ_transport_args__isset;

class ParaServ_transport_args {
 public:

  ParaServ_transport_args(const ParaServ_transport_args&);
  ParaServ_transport_args& operator=(const ParaServ_transport_args&);
  ParaServ_transport_args() {
  }

  virtual ~ParaServ_transport_args() throw();
  std::map<std::string, std::string>  col_ip;

  _ParaServ_transport_args__isset __isset;

  void __set_col_ip(const std::map<std::string, std::string> & val);

  bool operator == (const ParaServ_transport_args & rhs) const
  {
    if (!(col_ip == rhs.col_ip))
      return false;
    return true;
  }
  bool operator != (const ParaServ_transport_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_transport_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_transport_pargs {
 public:


  virtual ~ParaServ_transport_pargs() throw();
  const std::map<std::string, std::string> * col_ip;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_transport_result {
 public:

  ParaServ_transport_result(const ParaServ_transport_result&);
  ParaServ_transport_result& operator=(const ParaServ_transport_result&);
  ParaServ_transport_result() {
  }

  virtual ~ParaServ_transport_result() throw();

  bool operator == (const ParaServ_transport_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ParaServ_transport_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_transport_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_transport_presult {
 public:


  virtual ~ParaServ_transport_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ParaServ_start_sync_client_args__isset {
  _ParaServ_start_sync_client_args__isset() : url(false), path(false) {}
  bool url :1;
  bool path :1;
} _ParaServ_start_sync_client_args__isset;

class ParaServ_start_sync_client_args {
 public:

  ParaServ_start_sync_client_args(const ParaServ_start_sync_client_args&);
  ParaServ_start_sync_client_args& operator=(const ParaServ_start_sync_client_args&);
  ParaServ_start_sync_client_args() : url(), path() {
  }

  virtual ~ParaServ_start_sync_client_args() throw();
  std::string url;
  std::string path;

  _ParaServ_start_sync_client_args__isset __isset;

  void __set_url(const std::string& val);

  void __set_path(const std::string& val);

  bool operator == (const ParaServ_start_sync_client_args & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const ParaServ_start_sync_client_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_start_sync_client_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_start_sync_client_pargs {
 public:


  virtual ~ParaServ_start_sync_client_pargs() throw();
  const std::string* url;
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_start_sync_client_result {
 public:

  ParaServ_start_sync_client_result(const ParaServ_start_sync_client_result&);
  ParaServ_start_sync_client_result& operator=(const ParaServ_start_sync_client_result&);
  ParaServ_start_sync_client_result() {
  }

  virtual ~ParaServ_start_sync_client_result() throw();

  bool operator == (const ParaServ_start_sync_client_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ParaServ_start_sync_client_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_start_sync_client_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_start_sync_client_presult {
 public:


  virtual ~ParaServ_start_sync_client_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ParaServ_stop_sync_client_args__isset {
  _ParaServ_stop_sync_client_args__isset() : url(false), path(false) {}
  bool url :1;
  bool path :1;
} _ParaServ_stop_sync_client_args__isset;

class ParaServ_stop_sync_client_args {
 public:

  ParaServ_stop_sync_client_args(const ParaServ_stop_sync_client_args&);
  ParaServ_stop_sync_client_args& operator=(const ParaServ_stop_sync_client_args&);
  ParaServ_stop_sync_client_args() : url(), path() {
  }

  virtual ~ParaServ_stop_sync_client_args() throw();
  std::string url;
  std::string path;

  _ParaServ_stop_sync_client_args__isset __isset;

  void __set_url(const std::string& val);

  void __set_path(const std::string& val);

  bool operator == (const ParaServ_stop_sync_client_args & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const ParaServ_stop_sync_client_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_stop_sync_client_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_stop_sync_client_pargs {
 public:


  virtual ~ParaServ_stop_sync_client_pargs() throw();
  const std::string* url;
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_stop_sync_client_result {
 public:

  ParaServ_stop_sync_client_result(const ParaServ_stop_sync_client_result&);
  ParaServ_stop_sync_client_result& operator=(const ParaServ_stop_sync_client_result&);
  ParaServ_stop_sync_client_result() {
  }

  virtual ~ParaServ_stop_sync_client_result() throw();

  bool operator == (const ParaServ_stop_sync_client_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ParaServ_stop_sync_client_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_stop_sync_client_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_stop_sync_client_presult {
 public:


  virtual ~ParaServ_stop_sync_client_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ParaServ_sync_del_args__isset {
  _ParaServ_sync_del_args__isset() : keys(false) {}
  bool keys :1;
} _ParaServ_sync_del_args__isset;

class ParaServ_sync_del_args {
 public:

  ParaServ_sync_del_args(const ParaServ_sync_del_args&);
  ParaServ_sync_del_args& operator=(const ParaServ_sync_del_args&);
  ParaServ_sync_del_args() {
  }

  virtual ~ParaServ_sync_del_args() throw();
  std::set<Key>  keys;

  _ParaServ_sync_del_args__isset __isset;

  void __set_keys(const std::set<Key> & val);

  bool operator == (const ParaServ_sync_del_args & rhs) const
  {
    if (!(keys == rhs.keys))
      return false;
    return true;
  }
  bool operator != (const ParaServ_sync_del_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_sync_del_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_sync_del_pargs {
 public:


  virtual ~ParaServ_sync_del_pargs() throw();
  const std::set<Key> * keys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_sync_del_result {
 public:

  ParaServ_sync_del_result(const ParaServ_sync_del_result&);
  ParaServ_sync_del_result& operator=(const ParaServ_sync_del_result&);
  ParaServ_sync_del_result() {
  }

  virtual ~ParaServ_sync_del_result() throw();

  bool operator == (const ParaServ_sync_del_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ParaServ_sync_del_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_sync_del_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_sync_del_presult {
 public:


  virtual ~ParaServ_sync_del_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ParaServ_heartbeat_args__isset {
  _ParaServ_heartbeat_args__isset() : beat(false) {}
  bool beat :1;
} _ParaServ_heartbeat_args__isset;

class ParaServ_heartbeat_args {
 public:

  ParaServ_heartbeat_args(const ParaServ_heartbeat_args&);
  ParaServ_heartbeat_args& operator=(const ParaServ_heartbeat_args&);
  ParaServ_heartbeat_args() : beat(0) {
  }

  virtual ~ParaServ_heartbeat_args() throw();
  int32_t beat;

  _ParaServ_heartbeat_args__isset __isset;

  void __set_beat(const int32_t val);

  bool operator == (const ParaServ_heartbeat_args & rhs) const
  {
    if (!(beat == rhs.beat))
      return false;
    return true;
  }
  bool operator != (const ParaServ_heartbeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_heartbeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_heartbeat_pargs {
 public:


  virtual ~ParaServ_heartbeat_pargs() throw();
  const int32_t* beat;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParaServ_heartbeat_result__isset {
  _ParaServ_heartbeat_result__isset() : success(false) {}
  bool success :1;
} _ParaServ_heartbeat_result__isset;

class ParaServ_heartbeat_result {
 public:

  ParaServ_heartbeat_result(const ParaServ_heartbeat_result&);
  ParaServ_heartbeat_result& operator=(const ParaServ_heartbeat_result&);
  ParaServ_heartbeat_result() : success() {
  }

  virtual ~ParaServ_heartbeat_result() throw();
  std::string success;

  _ParaServ_heartbeat_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const ParaServ_heartbeat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ParaServ_heartbeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_heartbeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParaServ_heartbeat_presult__isset {
  _ParaServ_heartbeat_presult__isset() : success(false) {}
  bool success :1;
} _ParaServ_heartbeat_presult__isset;

class ParaServ_heartbeat_presult {
 public:


  virtual ~ParaServ_heartbeat_presult() throw();
  std::string* success;

  _ParaServ_heartbeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ParaServ_status_cmd_args__isset {
  _ParaServ_status_cmd_args__isset() : cmd(false), values(false) {}
  bool cmd :1;
  bool values :1;
} _ParaServ_status_cmd_args__isset;

class ParaServ_status_cmd_args {
 public:

  ParaServ_status_cmd_args(const ParaServ_status_cmd_args&);
  ParaServ_status_cmd_args& operator=(const ParaServ_status_cmd_args&);
  ParaServ_status_cmd_args() : cmd() {
  }

  virtual ~ParaServ_status_cmd_args() throw();
  std::string cmd;
  std::vector<std::string>  values;

  _ParaServ_status_cmd_args__isset __isset;

  void __set_cmd(const std::string& val);

  void __set_values(const std::vector<std::string> & val);

  bool operator == (const ParaServ_status_cmd_args & rhs) const
  {
    if (!(cmd == rhs.cmd))
      return false;
    if (!(values == rhs.values))
      return false;
    return true;
  }
  bool operator != (const ParaServ_status_cmd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_status_cmd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_status_cmd_pargs {
 public:


  virtual ~ParaServ_status_cmd_pargs() throw();
  const std::string* cmd;
  const std::vector<std::string> * values;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParaServ_status_cmd_result__isset {
  _ParaServ_status_cmd_result__isset() : success(false) {}
  bool success :1;
} _ParaServ_status_cmd_result__isset;

class ParaServ_status_cmd_result {
 public:

  ParaServ_status_cmd_result(const ParaServ_status_cmd_result&);
  ParaServ_status_cmd_result& operator=(const ParaServ_status_cmd_result&);
  ParaServ_status_cmd_result() : success() {
  }

  virtual ~ParaServ_status_cmd_result() throw();
  std::string success;

  _ParaServ_status_cmd_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const ParaServ_status_cmd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ParaServ_status_cmd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_status_cmd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParaServ_status_cmd_presult__isset {
  _ParaServ_status_cmd_presult__isset() : success(false) {}
  bool success :1;
} _ParaServ_status_cmd_presult__isset;

class ParaServ_status_cmd_presult {
 public:


  virtual ~ParaServ_status_cmd_presult() throw();
  std::string* success;

  _ParaServ_status_cmd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ParaServ_backup_args__isset {
  _ParaServ_backup_args__isset() : backup_type(false), subdir(false), col_ip(false) {}
  bool backup_type :1;
  bool subdir :1;
  bool col_ip :1;
} _ParaServ_backup_args__isset;

class ParaServ_backup_args {
 public:

  ParaServ_backup_args(const ParaServ_backup_args&);
  ParaServ_backup_args& operator=(const ParaServ_backup_args&);
  ParaServ_backup_args() : backup_type(), subdir() {
  }

  virtual ~ParaServ_backup_args() throw();
  std::string backup_type;
  std::string subdir;
  std::map<std::string, std::string>  col_ip;

  _ParaServ_backup_args__isset __isset;

  void __set_backup_type(const std::string& val);

  void __set_subdir(const std::string& val);

  void __set_col_ip(const std::map<std::string, std::string> & val);

  bool operator == (const ParaServ_backup_args & rhs) const
  {
    if (!(backup_type == rhs.backup_type))
      return false;
    if (!(subdir == rhs.subdir))
      return false;
    if (!(col_ip == rhs.col_ip))
      return false;
    return true;
  }
  bool operator != (const ParaServ_backup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_backup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaServ_backup_pargs {
 public:


  virtual ~ParaServ_backup_pargs() throw();
  const std::string* backup_type;
  const std::string* subdir;
  const std::map<std::string, std::string> * col_ip;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParaServ_backup_result__isset {
  _ParaServ_backup_result__isset() : success(false) {}
  bool success :1;
} _ParaServ_backup_result__isset;

class ParaServ_backup_result {
 public:

  ParaServ_backup_result(const ParaServ_backup_result&);
  ParaServ_backup_result& operator=(const ParaServ_backup_result&);
  ParaServ_backup_result() : success() {
  }

  virtual ~ParaServ_backup_result() throw();
  std::string success;

  _ParaServ_backup_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const ParaServ_backup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ParaServ_backup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaServ_backup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParaServ_backup_presult__isset {
  _ParaServ_backup_presult__isset() : success(false) {}
  bool success :1;
} _ParaServ_backup_presult__isset;

class ParaServ_backup_presult {
 public:


  virtual ~ParaServ_backup_presult() throw();
  std::string* success;

  _ParaServ_backup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ParaServClient : virtual public ParaServIf {
 public:
  ParaServClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ParaServClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void push(const std::map<Key, std::string> & key_vals);
  void send_push(const std::map<Key, std::string> & key_vals);
  void sync_push(const std::map<Key, std::string> & key_vals);
  void send_sync_push(const std::map<Key, std::string> & key_vals);
  void recv_sync_push();
  void pushemb(const std::map<Key, std::string> & key_vals);
  void send_pushemb(const std::map<Key, std::string> & key_vals);
  void recv_pushemb();
  void pushada(const std::map<Key, std::string> & key_vals);
  void send_pushada(const std::map<Key, std::string> & key_vals);
  void recv_pushada();
  void pull(std::map<Key, std::string> & _return, const std::set<Key> & keys);
  void send_pull(const std::set<Key> & keys);
  void recv_pull(std::map<Key, std::string> & _return);
  void pull_online(std::map<Key, std::string> & _return, const std::set<Key> & keys);
  void send_pull_online(const std::set<Key> & keys);
  void recv_pull_online(std::map<Key, std::string> & _return);
  void start(const std::vector<int32_t> & col_num, const int32_t tot_files);
  void send_start(const std::vector<int32_t> & col_num, const int32_t tot_files);
  void recv_start();
  void copy_start(const std::vector<int32_t> & col_num, const int32_t tot_files);
  void send_copy_start(const std::vector<int32_t> & col_num, const int32_t tot_files);
  void recv_copy_start();
  void transport(const std::map<std::string, std::string> & col_ip);
  void send_transport(const std::map<std::string, std::string> & col_ip);
  void recv_transport();
  void start_sync_client(const std::string& url, const std::string& path);
  void send_start_sync_client(const std::string& url, const std::string& path);
  void recv_start_sync_client();
  void stop_sync_client(const std::string& url, const std::string& path);
  void send_stop_sync_client(const std::string& url, const std::string& path);
  void recv_stop_sync_client();
  void sync_del(const std::set<Key> & keys);
  void send_sync_del(const std::set<Key> & keys);
  void recv_sync_del();
  void heartbeat(std::string& _return, const int32_t beat);
  void send_heartbeat(const int32_t beat);
  void recv_heartbeat(std::string& _return);
  void status_cmd(std::string& _return, const std::string& cmd, const std::vector<std::string> & values);
  void send_status_cmd(const std::string& cmd, const std::vector<std::string> & values);
  void recv_status_cmd(std::string& _return);
  void backup(std::string& _return, const std::string& backup_type, const std::string& subdir, const std::map<std::string, std::string> & col_ip);
  void send_backup(const std::string& backup_type, const std::string& subdir, const std::map<std::string, std::string> & col_ip);
  void recv_backup(std::string& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ParaServProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<ParaServIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ParaServProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_push(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sync_push(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pushemb(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pushada(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pull(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pull_online(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_copy_start(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_transport(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start_sync_client(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stop_sync_client(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sync_del(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_heartbeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_status_cmd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_backup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ParaServProcessor(::apache::thrift::stdcxx::shared_ptr<ParaServIf> iface) :
    iface_(iface) {
    processMap_["push"] = &ParaServProcessor::process_push;
    processMap_["sync_push"] = &ParaServProcessor::process_sync_push;
    processMap_["pushemb"] = &ParaServProcessor::process_pushemb;
    processMap_["pushada"] = &ParaServProcessor::process_pushada;
    processMap_["pull"] = &ParaServProcessor::process_pull;
    processMap_["pull_online"] = &ParaServProcessor::process_pull_online;
    processMap_["start"] = &ParaServProcessor::process_start;
    processMap_["copy_start"] = &ParaServProcessor::process_copy_start;
    processMap_["transport"] = &ParaServProcessor::process_transport;
    processMap_["start_sync_client"] = &ParaServProcessor::process_start_sync_client;
    processMap_["stop_sync_client"] = &ParaServProcessor::process_stop_sync_client;
    processMap_["sync_del"] = &ParaServProcessor::process_sync_del;
    processMap_["heartbeat"] = &ParaServProcessor::process_heartbeat;
    processMap_["status_cmd"] = &ParaServProcessor::process_status_cmd;
    processMap_["backup"] = &ParaServProcessor::process_backup;
  }

  virtual ~ParaServProcessor() {}
};

class ParaServProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ParaServProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< ParaServIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< ParaServIfFactory > handlerFactory_;
};

class ParaServMultiface : virtual public ParaServIf {
 public:
  ParaServMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<ParaServIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ParaServMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<ParaServIf> > ifaces_;
  ParaServMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<ParaServIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void push(const std::map<Key, std::string> & key_vals) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->push(key_vals);
    }
    ifaces_[i]->push(key_vals);
  }

  void sync_push(const std::map<Key, std::string> & key_vals) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sync_push(key_vals);
    }
    ifaces_[i]->sync_push(key_vals);
  }

  void pushemb(const std::map<Key, std::string> & key_vals) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pushemb(key_vals);
    }
    ifaces_[i]->pushemb(key_vals);
  }

  void pushada(const std::map<Key, std::string> & key_vals) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pushada(key_vals);
    }
    ifaces_[i]->pushada(key_vals);
  }

  void pull(std::map<Key, std::string> & _return, const std::set<Key> & keys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pull(_return, keys);
    }
    ifaces_[i]->pull(_return, keys);
    return;
  }

  void pull_online(std::map<Key, std::string> & _return, const std::set<Key> & keys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pull_online(_return, keys);
    }
    ifaces_[i]->pull_online(_return, keys);
    return;
  }

  void start(const std::vector<int32_t> & col_num, const int32_t tot_files) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start(col_num, tot_files);
    }
    ifaces_[i]->start(col_num, tot_files);
  }

  void copy_start(const std::vector<int32_t> & col_num, const int32_t tot_files) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->copy_start(col_num, tot_files);
    }
    ifaces_[i]->copy_start(col_num, tot_files);
  }

  void transport(const std::map<std::string, std::string> & col_ip) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->transport(col_ip);
    }
    ifaces_[i]->transport(col_ip);
  }

  void start_sync_client(const std::string& url, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start_sync_client(url, path);
    }
    ifaces_[i]->start_sync_client(url, path);
  }

  void stop_sync_client(const std::string& url, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stop_sync_client(url, path);
    }
    ifaces_[i]->stop_sync_client(url, path);
  }

  void sync_del(const std::set<Key> & keys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sync_del(keys);
    }
    ifaces_[i]->sync_del(keys);
  }

  void heartbeat(std::string& _return, const int32_t beat) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->heartbeat(_return, beat);
    }
    ifaces_[i]->heartbeat(_return, beat);
    return;
  }

  void status_cmd(std::string& _return, const std::string& cmd, const std::vector<std::string> & values) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->status_cmd(_return, cmd, values);
    }
    ifaces_[i]->status_cmd(_return, cmd, values);
    return;
  }

  void backup(std::string& _return, const std::string& backup_type, const std::string& subdir, const std::map<std::string, std::string> & col_ip) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->backup(_return, backup_type, subdir, col_ip);
    }
    ifaces_[i]->backup(_return, backup_type, subdir, col_ip);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ParaServConcurrentClient : virtual public ParaServIf {
 public:
  ParaServConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ParaServConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void push(const std::map<Key, std::string> & key_vals);
  void send_push(const std::map<Key, std::string> & key_vals);
  void sync_push(const std::map<Key, std::string> & key_vals);
  int32_t send_sync_push(const std::map<Key, std::string> & key_vals);
  void recv_sync_push(const int32_t seqid);
  void pushemb(const std::map<Key, std::string> & key_vals);
  int32_t send_pushemb(const std::map<Key, std::string> & key_vals);
  void recv_pushemb(const int32_t seqid);
  void pushada(const std::map<Key, std::string> & key_vals);
  int32_t send_pushada(const std::map<Key, std::string> & key_vals);
  void recv_pushada(const int32_t seqid);
  void pull(std::map<Key, std::string> & _return, const std::set<Key> & keys);
  int32_t send_pull(const std::set<Key> & keys);
  void recv_pull(std::map<Key, std::string> & _return, const int32_t seqid);
  void pull_online(std::map<Key, std::string> & _return, const std::set<Key> & keys);
  int32_t send_pull_online(const std::set<Key> & keys);
  void recv_pull_online(std::map<Key, std::string> & _return, const int32_t seqid);
  void start(const std::vector<int32_t> & col_num, const int32_t tot_files);
  int32_t send_start(const std::vector<int32_t> & col_num, const int32_t tot_files);
  void recv_start(const int32_t seqid);
  void copy_start(const std::vector<int32_t> & col_num, const int32_t tot_files);
  int32_t send_copy_start(const std::vector<int32_t> & col_num, const int32_t tot_files);
  void recv_copy_start(const int32_t seqid);
  void transport(const std::map<std::string, std::string> & col_ip);
  int32_t send_transport(const std::map<std::string, std::string> & col_ip);
  void recv_transport(const int32_t seqid);
  void start_sync_client(const std::string& url, const std::string& path);
  int32_t send_start_sync_client(const std::string& url, const std::string& path);
  void recv_start_sync_client(const int32_t seqid);
  void stop_sync_client(const std::string& url, const std::string& path);
  int32_t send_stop_sync_client(const std::string& url, const std::string& path);
  void recv_stop_sync_client(const int32_t seqid);
  void sync_del(const std::set<Key> & keys);
  int32_t send_sync_del(const std::set<Key> & keys);
  void recv_sync_del(const int32_t seqid);
  void heartbeat(std::string& _return, const int32_t beat);
  int32_t send_heartbeat(const int32_t beat);
  void recv_heartbeat(std::string& _return, const int32_t seqid);
  void status_cmd(std::string& _return, const std::string& cmd, const std::vector<std::string> & values);
  int32_t send_status_cmd(const std::string& cmd, const std::vector<std::string> & values);
  void recv_status_cmd(std::string& _return, const int32_t seqid);
  void backup(std::string& _return, const std::string& backup_type, const std::string& subdir, const std::map<std::string, std::string> & col_ip);
  int32_t send_backup(const std::string& backup_type, const std::string& subdir, const std::map<std::string, std::string> & col_ip);
  void recv_backup(std::string& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
