// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ParaServ.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::ps;

class ParaServHandler : virtual public ParaServIf {
 public:
  ParaServHandler() {
    // Your initialization goes here
  }

  void push(const std::map<Key, std::string> & key_vals) {
    // Your implementation goes here
    printf("push\n");
  }

  void sync_push(const std::map<Key, std::string> & key_vals) {
    // Your implementation goes here
    printf("sync_push\n");
  }

  void pushemb(const std::map<Key, std::string> & key_vals) {
    // Your implementation goes here
    printf("pushemb\n");
  }

  void pushada(const std::map<Key, std::string> & key_vals) {
    // Your implementation goes here
    printf("pushada\n");
  }

  void pull(std::map<Key, std::string> & _return, const std::set<Key> & keys) {
    // Your implementation goes here
    printf("pull\n");
  }

  void pull_online(std::map<Key, std::string> & _return, const std::set<Key> & keys) {
    // Your implementation goes here
    printf("pull_online\n");
  }

  void start(const std::vector<int32_t> & col_num, const int32_t tot_files) {
    // Your implementation goes here
    printf("start\n");
  }

  void copy_start(const std::vector<int32_t> & col_num, const int32_t tot_files) {
    // Your implementation goes here
    printf("copy_start\n");
  }

  void transport(const std::map<std::string, std::string> & col_ip) {
    // Your implementation goes here
    printf("transport\n");
  }

  void start_sync_client(const std::string& url, const std::string& path) {
    // Your implementation goes here
    printf("start_sync_client\n");
  }

  void stop_sync_client(const std::string& url, const std::string& path) {
    // Your implementation goes here
    printf("stop_sync_client\n");
  }

  void sync_del(const std::set<Key> & keys) {
    // Your implementation goes here
    printf("sync_del\n");
  }

  void heartbeat(std::string& _return, const int32_t beat) {
    // Your implementation goes here
    printf("heartbeat\n");
  }

  void status_cmd(std::string& _return, const std::string& cmd, const std::vector<std::string> & values) {
    // Your implementation goes here
    printf("status_cmd\n");
  }

  void backup(std::string& _return, const std::string& backup_type, const std::string& subdir, const std::map<std::string, std::string> & col_ip) {
    // Your implementation goes here
    printf("backup\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<ParaServHandler> handler(new ParaServHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new ParaServProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

